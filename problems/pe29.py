"""
How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2<=b <= 100

iterate through combinations and store outputs in list
sort list from smallest to largest
iterate through sorted list -- if previous term is different than current term then add
"""
import time


def return_distinct_terms_length(first_value_lower_bound_inclusive, first_value_upper_bound_inclusive, second_value_lower_bound_inclusive, second_value_upper_bound_inclusive):
    distinct_terms = set()
    for first_value in range(first_value_lower_bound_inclusive, first_value_upper_bound_inclusive + 1):
        for second_value in range(second_value_lower_bound_inclusive, second_value_upper_bound_inclusive + 1):
            distinct_terms.add(first_value ** second_value)
    return len(distinct_terms)


def main(first_value_lower_bound_inclusive, first_value_upper_bound_inclusive, second_value_lower_bound_inclusive, second_value_upper_bound_inclusive):
    start_time = time.time()

    distinct_terms_length = return_distinct_terms_length(
        first_value_lower_bound_inclusive,
        first_value_upper_bound_inclusive,
        second_value_lower_bound_inclusive,
        second_value_upper_bound_inclusive
    )

    end_time = time.time()
    execution_seconds = end_time - start_time
    print "{0} distinct terms for {1} <= a <= {2} and {3} <= b <= {4}; execution took {5} seconds".format(
        distinct_terms_length,
        first_value_lower_bound_inclusive,
        first_value_upper_bound_inclusive,
        second_value_lower_bound_inclusive,
        second_value_upper_bound_inclusive,
        execution_seconds
    )

main(2, 100, 2, 100)