"""
https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# Wayyy better solution using prime factorization

import math
import time


def nth_triangle_number(n):
    return n*(n+1)/2


#count of divisors -- only need to count divisors until sqrt(number) and then multiply by 2 unless sqrt(number) is an integer, then add 1
def divisor_count_for_number(number):
    divisor_count = 0
    square_root = math.sqrt(number)
    for potential_divisor in range(1, int(math.floor(square_root))):
        if 0 == number % potential_divisor:
            divisor_count += 2
    if square_root.is_integer():
        divisor_count += 1
    return divisor_count


def first_triangle_number_with_more_than_m_divisors(m):
    calculated_divisors = 0
    triangle_number = 0
    triangle_number_index = 0
    while calculated_divisors < m:
        triangle_number = nth_triangle_number(triangle_number_index)
        calculated_divisors = divisor_count_for_number(triangle_number)
        triangle_number_index += 1
    return triangle_number


def main(divisor_count_to_exceed):
    start_time = time.time()

    triangle_number = first_triangle_number_with_more_than_m_divisors(divisor_count_to_exceed)

    end_time = time.time()
    execution_time_in_seconds = end_time - start_time

    print "first triangle number to have more than {0} divisors is {1}; took {2} seconds"\
        .format(divisor_count_to_exceed, triangle_number, execution_time_in_seconds)

main(500)